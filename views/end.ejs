<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"
  integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"
  integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
<script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>

<script src="/socket.io/socket.io.js"></script>
<script>
  var socket = io();

  socket.on('duplicated', (data) => {
    console.log(data);
    alert(data)
  })

  socket.on("update-table", (users) => {
    console.log(users);
    if (users) {
      const array = users.map((user, index) => {
        user.comment = user.comment ? user.comment : '';
        user.point = user.point ? user.point : '';
        return `
        <tr>
            <td>
              ${user.name}
            </td>
            <td>
              ${user.studentCode}
            </td>
            <td>
              ${user.classroom}
            </td>
            <td>
              ${user.point}
            </td>
            <td>
              ${user.comment}
            </td>
          </tr>
      `;
      });

      document.querySelector("tbody").innerHTML = array.join("");
    }
  });

  if (document.querySelectorAll(".candidate__point")) {
    document.querySelectorAll(".candidate__point").forEach((input) => {
      input.onkeyup = (e) => {
        const userId = e.target.parentNode.parentNode.className;
        const point = e.target.value;
        console.log(userId);
        socket.emit("client-update-point", {
          userId,
          point,
        });
      };
    });
  }
  if (document.querySelectorAll(".candidate__comment")) {
    document.querySelectorAll(".candidate__comment").forEach((input) => {
      input.onkeyup = (e) => {
        const userId = e.target.parentNode.parentNode.className;
        const comment = e.target.value;
        console.log(userId);
        socket.emit("client-update-comment", {
          userId,
          comment,
        });
      };
    });
  }
  if (document.querySelector(".input__studentcode")) {
    document.querySelector(".input__studentcode").onkeyup = (e) => {
      const studentCode = e.target.value;
      console.log(studentCode);
      socket.emit("client-input-studentCode", studentCode);
    };
  }



</script>
<script src="/js/register.js"></script>